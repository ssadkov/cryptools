import asyncio
import json
import os
from datetime import datetime, timezone
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç

# –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ token.txt
with open("token.txt", "r") as file:
    TOKEN = file.read().strip()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON-—Ñ–∞–π–ª–æ–≤
def load_json(filename):
    try:
        with open(filename, "r") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
def format_time_left(end_timestamp):
    now = datetime.utcnow().timestamp()
    remaining_time = end_timestamp - now
    if remaining_time <= 0:
        return "Ended"
    days = int(remaining_time // 86400)
    hours = int((remaining_time % 86400) // 3600)
    return f"{days}d {hours}h"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É–ª–æ–≤ (—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)
def format_time_since(timestamp_str):
    try:
        timestamp = datetime.strptime(timestamp_str, "%Y-%m-%d %H:%M:%S").replace(tzinfo=timezone.utc)
        now = datetime.utcnow().replace(tzinfo=timezone.utc)
        delta = now - timestamp
        minutes_ago = int(delta.total_seconds() // 60)
        if minutes_ago < 1:
            return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
        return f"{minutes_ago} –º–∏–Ω –Ω–∞–∑–∞–¥"
    except ValueError:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /pools
@dp.message(Command("start", "pools"))
async def send_pools(message: Message):
    bybit_data = load_json("pools_data/bybit_pools.json")
    gate_data = load_json("pools_data/gate_pools.json")
    bitget_data = load_json("pools_data/bitget_pools.json")

    response = "üìä *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—É–ª—ã:*\n\n"

    # Bybit
    if bybit_data and "pools" in bybit_data:
        updated_time = format_time_since(bybit_data["timestamp"])
        response += f"‚úÖ **[Bybit](https://partner.bybit.com/b/sadkovpul)** *(–û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_time})*\n"
        for pool in bybit_data["pools"]:
            pool_name = pool["returnCoin"]
            time_left = format_time_left(pool["stakeEndTime"] / 1000)
            for stake in pool["stakePoolList"]:
                apr = float(stake["apr"])
                coin = stake["stakeCoin"]
                usdt_emoji = "üí≤" if coin == "USDT" else "üîπ"
                response += f"{usdt_emoji} {pool_name} ({coin}) - {apr:.2f}% APR, ends in {time_left}\n"
        response += "\n"
    else:
        response += "‚ùå Bybit: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö\n\n"

    # Gate.io (–∏—Å–∫–ª—é—á–∞–µ–º –ø—É–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏—Å—å)
    if gate_data and "pools" in gate_data:
        updated_time = format_time_since(gate_data["timestamp"])
        response += f"‚úÖ **[Gate](https://www.gate.tv/share/poolsadkov)** *(–û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_time})*\n"
        for project in gate_data["pools"]:
            project_name = project["name"]
            start_time = project["start_timest"]
            end_time = project["end_timest"]
            now = datetime.utcnow().timestamp()

            if start_time > now:
                continue

            for pool in project["reward_pools"]:
                apr = float(pool["rate_year"])
                coin = pool["coin"]
                time_left = format_time_left(end_time)
                is_new_user_pool = pool.get("limit_rule") == 1
                new_user_emoji = " üÜïüë§" if is_new_user_pool else ""
                usdt_emoji = "üí≤" if coin == "USDT" else "üîπ"
                if time_left != "Ended":
                    response += f"{usdt_emoji} {project_name} ({coin}){new_user_emoji} - {apr:.2f}% APR, ends in {time_left}\n"
        response += "\n"
    else:
        response += "‚ùå Gate: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö\n\n"

    # Bitget
    if bitget_data and "pools" in bitget_data:
        updated_time = format_time_since(bitget_data["timestamp"])
        response += f"‚úÖ **[Bitget](https://www.bitgetapp.com/ru/events/poolx)** *(–û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_time})*\n"
        for pool in bitget_data["pools"]:
            pool_name = pool["productCoinName"]
            time_left = format_time_left(pool["endTime"] / 1000)
            for stake in pool["productSubList"]:
                apr = float(stake["apr"])
                coin = stake["productSubCoinName"]
                usdt_emoji = "üí≤" if coin == "USDT" else "üîπ"
                if time_left != "Ended":
                    response += f"{usdt_emoji} {pool_name} ({coin}) - {apr:.2f}% APR, ends in {time_left}\n"
        response += "\n"
    else:
        response += "‚ùå Bitget: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    response += "üîÑ –ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –ø—É–ª—ã, –Ω–∞–∂–º–∏—Ç–µ /pools"

    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(response, disable_web_page_preview=True)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
